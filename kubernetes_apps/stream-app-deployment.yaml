# Secret to store the MySQL root password securely
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: cTVnTzJPdm1xZjQ2QlNGZklB  # base64 encoded value of 'q5gO2Ovmqf46BSFfIA'

---

# PersistentVolume for shared storage (shared between stream-app pods)
apiVersion: v1
kind: PersistentVolume
metadata:
  name: shared-volume
spec:
  accessModes:
    - ReadWriteMany   # Allow multiple pods to read/write
  capacity:
    storage: 2Gi      # Define storage capacity (adjust as needed)
  persistentVolumeReclaimPolicy: Retain
  storageClassName: "manual"
  hostPath:
    path: "/mnt/shared"  # Path on the host where the data will be stored (specific to your environment)

---

# PersistentVolumeClaim for the shared storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: shared-volume-claim
spec:
  accessModes:
    - ReadWriteMany  # Allows multiple pods to access the volume
  resources:
    requests:
      storage: 2Gi   # Requesting 2Gi of storage
  storageClassName: "manual"

---

# StatefulSet for MySQL
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  serviceName: "mysql-headless"
  replicas: 1  # Adjust replicas as per requirement
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret    # Reference the Secret
              key: MYSQL_ROOT_PASSWORD
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
  volumeClaimTemplates:
  - metadata:
      name: mysql-persistent-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi  # Adjust storage size as per need

---

# Headless Service for MySQL StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: mysql-headless
spec:
  clusterIP: None  # Headless service
  ports:
  - port: 3306
  selector:
    app: mysql

---

# External Service to expose MySQL StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: mysql-container
spec:
  type: ClusterIP  # Keep this internal
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  selector:
    app: mysql

---

# Deployment for the Stream App
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stream-app-deployment
spec:
  replicas: 3  # Number of replicas
  selector:
    matchLabels:
      app: stream-app
  template:
    metadata:
      labels:
        app: stream-app
    spec:
      serviceAccountName: stream-app-sa
      volumes:  # Correct placement of volumes
      - name: shared-volume
        persistentVolumeClaim:
          claimName: shared-volume-claim

      containers:
      - name: stream-app-container
        image: eddieadi/stream_app:latest
        ports:
        - containerPort: 5000  # Assuming your app runs on port 5000 in the container
        env:
        - name: ENV_VAR  # Example of passing environment variables
          value: "production"
        - name: MYSQL_HOST  # Environment variable for the MySQL host
          value: "mysql-container"  # This is the internal service name for MySQL
        - name: MYSQL_PORT  # Environment variable for MySQL port
          value: "3306"
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret    # Reference the Secret
              key: MYSQL_ROOT_PASSWORD
        volumeMounts:
        - name: shared-volume
          mountPath: /mnt/shared  # Shared volume will be mounted here in the containers
      imagePullSecrets:
      - name: my-dockerhub-secret

---

# Service for the Stream App
apiVersion: v1
kind: Service
metadata:
  name: stream-app-service
spec:
  type: NodePort
  selector:
    app: stream-app
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
      nodePort: 30080
